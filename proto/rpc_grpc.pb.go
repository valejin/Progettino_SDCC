// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/rpc.proto

package mapReduce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Master_DistributeData_FullMethodName          = "/Master/DistributeData"
	Master_NotifyMapperCompletion_FullMethodName  = "/Master/NotifyMapperCompletion"
	Master_NotifyReducerCompletion_FullMethodName = "/Master/NotifyReducerCompletion"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	DistributeData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error)
	NotifyMapperCompletion(ctx context.Context, in *MapperStatus, opts ...grpc.CallOption) (*Ack, error)
	NotifyReducerCompletion(ctx context.Context, in *ReducerStatus, opts ...grpc.CallOption) (*Ack, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) DistributeData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Master_DistributeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) NotifyMapperCompletion(ctx context.Context, in *MapperStatus, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Master_NotifyMapperCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) NotifyReducerCompletion(ctx context.Context, in *ReducerStatus, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Master_NotifyReducerCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility.
type MasterServer interface {
	DistributeData(context.Context, *Empty) (*Ack, error)
	NotifyMapperCompletion(context.Context, *MapperStatus) (*Ack, error)
	NotifyReducerCompletion(context.Context, *ReducerStatus) (*Ack, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMasterServer struct{}

func (UnimplementedMasterServer) DistributeData(context.Context, *Empty) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeData not implemented")
}
func (UnimplementedMasterServer) NotifyMapperCompletion(context.Context, *MapperStatus) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyMapperCompletion not implemented")
}
func (UnimplementedMasterServer) NotifyReducerCompletion(context.Context, *ReducerStatus) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyReducerCompletion not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}
func (UnimplementedMasterServer) testEmbeddedByValue()                {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	// If the following call pancis, it indicates UnimplementedMasterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_DistributeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).DistributeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_DistributeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).DistributeData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_NotifyMapperCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapperStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).NotifyMapperCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_NotifyMapperCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).NotifyMapperCompletion(ctx, req.(*MapperStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_NotifyReducerCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReducerStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).NotifyReducerCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_NotifyReducerCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).NotifyReducerCompletion(ctx, req.(*ReducerStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeData",
			Handler:    _Master_DistributeData_Handler,
		},
		{
			MethodName: "NotifyMapperCompletion",
			Handler:    _Master_NotifyMapperCompletion_Handler,
		},
		{
			MethodName: "NotifyReducerCompletion",
			Handler:    _Master_NotifyReducerCompletion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc.proto",
}

const (
	Mapper_ProcessChunk_FullMethodName = "/Mapper/ProcessChunk"
	Mapper_SendRanges_FullMethodName   = "/Mapper/SendRanges"
)

// MapperClient is the client API for Mapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapperClient interface {
	ProcessChunk(ctx context.Context, in *DataChunk, opts ...grpc.CallOption) (*Ack, error)
	SendRanges(ctx context.Context, in *RangeList, opts ...grpc.CallOption) (*Ack, error)
}

type mapperClient struct {
	cc grpc.ClientConnInterface
}

func NewMapperClient(cc grpc.ClientConnInterface) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) ProcessChunk(ctx context.Context, in *DataChunk, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mapper_ProcessChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapperClient) SendRanges(ctx context.Context, in *RangeList, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Mapper_SendRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapperServer is the server API for Mapper service.
// All implementations must embed UnimplementedMapperServer
// for forward compatibility.
type MapperServer interface {
	ProcessChunk(context.Context, *DataChunk) (*Ack, error)
	SendRanges(context.Context, *RangeList) (*Ack, error)
	mustEmbedUnimplementedMapperServer()
}

// UnimplementedMapperServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMapperServer struct{}

func (UnimplementedMapperServer) ProcessChunk(context.Context, *DataChunk) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessChunk not implemented")
}
func (UnimplementedMapperServer) SendRanges(context.Context, *RangeList) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRanges not implemented")
}
func (UnimplementedMapperServer) mustEmbedUnimplementedMapperServer() {}
func (UnimplementedMapperServer) testEmbeddedByValue()                {}

// UnsafeMapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapperServer will
// result in compilation errors.
type UnsafeMapperServer interface {
	mustEmbedUnimplementedMapperServer()
}

func RegisterMapperServer(s grpc.ServiceRegistrar, srv MapperServer) {
	// If the following call pancis, it indicates UnimplementedMapperServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mapper_ServiceDesc, srv)
}

func _Mapper_ProcessChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).ProcessChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mapper_ProcessChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).ProcessChunk(ctx, req.(*DataChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mapper_SendRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).SendRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mapper_SendRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).SendRanges(ctx, req.(*RangeList))
	}
	return interceptor(ctx, in, info, handler)
}

// Mapper_ServiceDesc is the grpc.ServiceDesc for Mapper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mapper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessChunk",
			Handler:    _Mapper_ProcessChunk_Handler,
		},
		{
			MethodName: "SendRanges",
			Handler:    _Mapper_SendRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc.proto",
}

const (
	Reducer_ReceiveChunk_FullMethodName   = "/Reducer/ReceiveChunk"
	Reducer_StartReduction_FullMethodName = "/Reducer/StartReduction"
)

// ReducerClient is the client API for Reducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReducerClient interface {
	ReceiveChunk(ctx context.Context, in *MappedData, opts ...grpc.CallOption) (*Ack, error)
	StartReduction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error)
}

type reducerClient struct {
	cc grpc.ClientConnInterface
}

func NewReducerClient(cc grpc.ClientConnInterface) ReducerClient {
	return &reducerClient{cc}
}

func (c *reducerClient) ReceiveChunk(ctx context.Context, in *MappedData, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Reducer_ReceiveChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reducerClient) StartReduction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Reducer_StartReduction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReducerServer is the server API for Reducer service.
// All implementations must embed UnimplementedReducerServer
// for forward compatibility.
type ReducerServer interface {
	ReceiveChunk(context.Context, *MappedData) (*Ack, error)
	StartReduction(context.Context, *Empty) (*Ack, error)
	mustEmbedUnimplementedReducerServer()
}

// UnimplementedReducerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReducerServer struct{}

func (UnimplementedReducerServer) ReceiveChunk(context.Context, *MappedData) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveChunk not implemented")
}
func (UnimplementedReducerServer) StartReduction(context.Context, *Empty) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReduction not implemented")
}
func (UnimplementedReducerServer) mustEmbedUnimplementedReducerServer() {}
func (UnimplementedReducerServer) testEmbeddedByValue()                 {}

// UnsafeReducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReducerServer will
// result in compilation errors.
type UnsafeReducerServer interface {
	mustEmbedUnimplementedReducerServer()
}

func RegisterReducerServer(s grpc.ServiceRegistrar, srv ReducerServer) {
	// If the following call pancis, it indicates UnimplementedReducerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Reducer_ServiceDesc, srv)
}

func _Reducer_ReceiveChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MappedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReducerServer).ReceiveChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reducer_ReceiveChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReducerServer).ReceiveChunk(ctx, req.(*MappedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reducer_StartReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReducerServer).StartReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Reducer_StartReduction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReducerServer).StartReduction(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Reducer_ServiceDesc is the grpc.ServiceDesc for Reducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Reducer",
	HandlerType: (*ReducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveChunk",
			Handler:    _Reducer_ReceiveChunk_Handler,
		},
		{
			MethodName: "StartReduction",
			Handler:    _Reducer_StartReduction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc.proto",
}
